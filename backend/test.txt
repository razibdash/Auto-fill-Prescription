const express = require("express");
const multer = require("multer");
const fs = require("fs");
const path = require("path");
const dotenv = require("dotenv");
const Groq = require("groq-sdk");
const cors = require("cors");
const { systemPrompt } = require("./prompts/systemPrompt");



dotenv.config();
const port = process.env.PORT || 3000;
const app = express();
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });
app.use(express.json());
app.use(express.static("public"));
app.use("/uploads", express.static("uploads"));
app.use(cors());
const storage = multer.diskStorage({
  destination: "uploads/",
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname); // keep .m4a, .mp3, .webm etc.
    cb(null, Date.now() + ext);
  }
});

// only allow supported audio formats
const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    const allowed = [
      ".flac", ".mp3", ".mp4", ".mpeg", ".mpga", ".m4a",
      ".ogg", ".opus", ".wav", ".webm"
    ];
    const ext = path.extname(file.originalname).toLowerCase();
    if (allowed.includes(ext)) {
      cb(null, true);
    } else {
      cb(new Error("Unsupported file type. Upload audio only."));
    }
  }
});




// 🎯 Main API route
app.post("/api/transcribe", upload.single("audio"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "No audio uploaded" });
    }

    const { country } = req.body;
    const audioPath = path.resolve(req.file.path);

    // 1️⃣ Transcribe with Whisper
    const transcription = await groq.audio.transcriptions.create({
      file: fs.createReadStream(audioPath),
      model: "whisper-large-v3",
      language: "en",
      prompt: systemPrompt(country),
    });

    const text = transcription.text;
    console.log("✅ Transcription:", text);

    // 2️⃣ Prompt for prescription extraction
    const userPrompt = `
    You are a medical scribe AI assisting a doctor in ${country}.
    Please extract a prescription and return it in pure JSON format.
  Follow this schema strictly:

  {
  "patientName": "string",
  "patientAge": "string",
  "patientWeight": "string",
  "diagnosis": "string",
  "medications": [
    {
      "name": "string",
      "dose": "string (e.g. 500 mg)",
      "frequency": "string (e.g. twice daily)",
      "duration": "string (e.g. 5 days)",
      "notes": "string (optional)"
    }
  ],
  "instructions": "string (general advice for the patient)"
 }

Doctor note:
"""${text}"""
`;

    // 3️⃣ Generate structured JSON
    const chatResponse = await groq.chat.completions.create({
      model: "llama-3.3-70b-versatile",
      messages: [
        {
          role: "system",
          content: systemPrompt(country),
        },
        {
          role: "user",
          content: userPrompt,
        },
      ],
      temperature: 0.2,
    });

    // 4️⃣ Extract and sanitize the model output
    let raw = chatResponse.choices[0].message.content.trim();
    console.log("🧾 Raw Model Output:", raw);

    // Remove markdown fences if present
    raw = raw.replace(/```json|```/g, "").trim();

    // Try to extract JSON portion even if surrounded by extra text
    const jsonMatch = raw.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error("No valid JSON detected in model output");
    }

    let cleaned = jsonMatch[0];

    // Parse JSON safely
    let prescription;
    try {
      prescription = JSON.parse(cleaned);
    } catch (err) {
      console.error("❌ JSON parse failed. Cleaned output:", cleaned);
      throw new Error("Invalid JSON output from model");
    }

    console.log("✅ Parsed Prescription:", prescription);

    // Clean up audio file
    fs.unlinkSync(audioPath);

    // Send successful response
    res.json({
      transcription: text,
      prescription,
    });
  } catch (err) {
    console.error("❌ Error:", err);
    res.status(500).json({ error: err.message });
  }
});



app.listen(port, () => console.log(`🚀 Server running at http://localhost:${port}`));


-----------------------------------------

const express = require("express");
const multer = require("multer");
const fs = require("fs");
const path = require("path");
const dotenv = require("dotenv");
const Groq = require("groq-sdk");
const cors = require("cors");
const { systemPrompt } = require("./prompts/systemPrompt");

dotenv.config();
const port = process.env.PORT || 3000;
const app = express();
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });
app.use(express.json());
app.use(express.static("public"));
app.use("/uploads", express.static("uploads"));
app.use(cors());
const { upload } = require("./utils/Upload");




// 🎯 Main API route
app.post("/api/transcribe", upload.single("audio"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "No audio uploaded" });
    }

    const { country } = req.body;
    const audioPath = path.resolve(req.file.path);

    // 1️⃣ Transcribe with Whisper
    const transcription = await groq.audio.transcriptions.create({
      file: fs.createReadStream(audioPath),
      model: "whisper-large-v3",
      language: "bn" || "en",
      prompt: systemPrompt(country),
    });

    const text = transcription.text;
    console.log("✅ Transcription:", text);

    // 2️⃣ Prompt for prescription extraction
    const userPrompt = `
    You are a medical scribe AI assisting a doctor in ${country}.
    Please extract a prescription and return it in pure JSON format.
    Follow this schema strictly:
  {
  "patientName": "string",
  "patientAge": "string",
  "patientWeight": "string",
  "diagnosis": "string",
  "medications": [
    {
      "name": "string",
      "dose": "string (e.g. 500 mg)",
      "frequency": "string (e.g. twice daily)",
      "duration": "string (e.g. 5 days)",
      "notes": "string (optional)"
    }
  ],
  "instructions": "string (general advice for the patient)"
 }

Doctor note:
"""${text}"""
`;

    // 3️⃣ Generate structured JSON
    const chatResponse = await groq.chat.completions.create({
      model: "llama-3.3-70b-versatile",
      messages: [
        {
          role: "system",
          content: systemPrompt(country),
        },
        {
          role: "user",
          content: userPrompt,
        },
      ],
      temperature: 0.2,
    });

    // 4️⃣ Extract and sanitize the model output
    let raw = chatResponse.choices[0].message.content.trim();
    console.log("🧾 Raw Model Output:", raw);

    // Remove markdown fences if present
    raw = raw.replace(/```json|```/g, "").trim();

    // Try to extract JSON portion even if surrounded by extra text
    const jsonMatch = raw.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error("No valid JSON detected in model output");
    }

    let cleaned = jsonMatch[0];

    // Parse JSON safely
    let prescription;
    try {
      prescription = JSON.parse(cleaned);
    } catch (err) {
      console.error("❌ JSON parse failed. Cleaned output:", cleaned);
      throw new Error("Invalid JSON output from model");
    }

    console.log("✅ Parsed Prescription:", prescription);

    // Clean up audio file
    fs.unlinkSync(audioPath);

    // Send successful response
    res.json({
      transcription: text,
      prescription,
    });
  } catch (err) {
    console.error("❌ Error:", err);
    res.status(500).json({ error: err.message });
  }
});



app.listen(port, () => console.log(`🚀 Server running at http://localhost:${port}`));
